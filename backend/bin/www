#!/usr/bin/env node

import { log } from 'console';
import app from '../app.js'; // Importe l'application Express depuis le fichier `app.js`
import debug from 'debug';
import http from 'http';

// Initialise le débogueur pour le serveur
const debugLog = debug('backend:server');

// Normalise le port pour s'assurer qu'il est valide
const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);
app.listen(PORT, ()=> {
  console.log(`server running on port ${PORT}`);
})

// Crée un serveur HTTP avec l'application Express
const server = http.createServer(app);

// Démarre le serveur et écoute les erreurs et les événements
server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

// Fonction pour normaliser le port
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // Retourne la valeur si ce n'est pas un nombre
  if (port >= 0) return port; // Retourne le port si c'est un nombre valide
  return false; // Retourne `false` si le port est invalide
}

// Fonction pour gérer les erreurs liées au serveur
function onError(error) {
  if (error.syscall !== 'listen') throw error; // Ignore les erreurs non liées à l'écoute du port
  const bind = typeof PORT === 'string' ? 'Pipe ' + PORT : 'Port ' + PORT;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1); // Quitte le processus avec un code d'erreur
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1); // Quitte le processus avec un code d'erreur
    default:
      throw error; // Lance l'erreur pour d'autres cas
  }
}

// Fonction pour afficher le port sur lequel le serveur écoute
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debugLog('Listening on ' + bind); // Affiche l'adresse d'écoute du serveur
}
